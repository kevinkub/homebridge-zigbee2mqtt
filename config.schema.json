{
  "pluginAlias": "HomebridgeZigbee2mqttEmbedded",
  "pluginType": "platform",
  "singular": true,
  "schema": {
    "type": "object",
    "properties": {
      "permit_join": {
        "type": "boolean",
        "default": false,
        "title": "Permit join",
        "description": "Allow new devices to join (re-applied at restart)"
      },
      "mqtt": {
        "type": "object",
        "title": "MQTT",
        "properties": {
          "base_topic": {
            "type": "string",
            "title": "Base topic",
            "requiresRestart": true,
            "description": "MQTT base topic for Zigbee2MQTT MQTT messages",
            "examples": ["zigbee2mqtt"]
          },
          "server": {
            "type": "string",
            "title": "MQTT server",
            "requiresRestart": true,
            "description": "MQTT server URL (use mqtts:// for SSL/TLS connection)",
            "default": "mqtt://localhost:1883",
            "examples": ["mqtt://localhost:1883"]
          },
          "keepalive": {
            "type": "number",
            "title": "Keepalive",
            "requiresRestart": true,
            "description": "MQTT keepalive in second"
          },
          "ca": {
            "type": "string",
            "title": "Certificate authority",
            "requiresRestart": true,
            "description": "Absolute path to SSL/TLS certificate of CA used to sign server and client certificates",
            "examples": ["/etc/ssl/mqtt-ca.crt"]
          },
          "key": {
            "type": "string",
            "title": "SSL/TLS key",
            "requiresRestart": true,
            "description": "Absolute path to SSL/TLS key for client-authentication",
            "examples": ["/etc/ssl/mqtt-client.key"]
          },
          "cert": {
            "type": "string",
            "title": "SSL/TLS certificate",
            "description": "Absolute path to SSL/TLS certificate for client-authentication",
            "requiresRestart": true,
            "examples": ["/etc/ssl/mqtt-client.crt"]
          },
          "user": {
            "type": "string",
            "title": "User",
            "requiresRestart": true,
            "description": "MQTT server authentication user",
            "examples": ["johnnysilverhand"]
          },
          "password": {
            "type": "string",
            "title": "Password",
            "requiresRestart": true,
            "description": "MQTT server authentication password",
            "examples": ["ILOVEPELMENI"]
          },
          "client_id": {
            "type": "string",
            "title": "Client ID",
            "requiresRestart": true,
            "description": "MQTT client ID",
            "examples": ["MY_CLIENT_ID"]
          },
          "reject_unauthorized": {
            "type": "boolean",
            "title": "Reject unauthorized",
            "requiresRestart": true,
            "description": "Disable self-signed SSL certificate"
          },
          "include_device_information": {
            "type": "boolean",
            "title": "Include device information",
            "description": "Include device information to mqtt messages"
          },
          "version": {
            "type": ["number", "null"],
            "title": "Version",
            "requiresRestart": true,
            "description": "MQTT protocol version",
            "examples": [4, 5]
          },
          "force_disable_retain": {
            "type": "boolean",
            "title": "Force disable retain",
            "requiresRestart": true,
            "description": "Disable retain for all send messages. ONLY enable if you MQTT broker doesn't support retained message (e.g. AWS IoT core, Azure IoT Hub, Google Cloud IoT core, IBM Watson IoT Platform). Enabling will break the Home Assistant integration"
          }
        },
        "required": ["base_topic", "server"]
      },
      "serial": {
        "type": "object",
        "title": "Serial",
        "properties": {
          "port": {
            "type": ["string", "null"],
            "title": "Port",
            "requiresRestart": true,
            "description": "Location of the adapter. To autodetect the port, set null",
            "examples": ["/dev/ttyACM0"]
          },
          "disable_led": {
            "type": "boolean",
            "title": "Disable led",
            "requiresRestart": true,
            "description": "Disable LED of the adapter if supported"
          },
          "adapter": {
            "type": ["string", "null"],
            "enum": ["deconz", "zstack", "zigate"],
            "title": "Adapter",
            "requiresRestart": true,
            "description": "Adapter type, not needed unless you are experiencing problems"
          }
        }
      },
      "blocklist": {
        "title": "Blocklist",
        "requiresRestart": true,
        "description": "Block devices from the network (by ieeeAddr)",
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "passlist": {
        "title": "Passlist",
        "requiresRestart": true,
        "description": "Allow only certain devices to join the network (by ieeeAddr). Note that all devices not on the passlist will be removed from the network!",
        "type": "array",
        "items": {
          "type": "string"
        }
      },
      "advanced": {
        "type": "object",
        "title": "Advanced",
        "properties": {
          "channel": {
            "type": "number",
            "minimum": 11,
            "maximum": 26,
            "title": "ZigBee channel",
            "requiresRestart": true,
            "description": "Zigbee channel, changing requires repairing all devices! (Note: use a ZLL channel: 11, 15, 20, or 25 to avoid Problems)",
            "examples": [11, 15, 20, 25]
          },
          "cache_state": {
            "type": "boolean",
            "title": "Cache state",
            "description": "MQTT message payload will contain all attributes, not only changed ones. Has to be true when integrating via Home Assistant"
          },
          "cache_state_persistent": {
            "type": "boolean",
            "title": "Persist cache state",
            "description": "Persist cached state, only used when cache_state: true"
          },
          "cache_state_send_on_startup": {
            "type": "boolean",
            "title": "Send cached state on startup",
            "description": "Send cached state on startup, only used when cache_state: true"
          },
          "log_level": {
            "type": "string",
            "enum": ["info", "warn", "error", "debug"],
            "title": "Log level",
            "description": "Logging level"
          },
          "baudrate": {
            "type": "number",
            "title": "Baudrate",
            "requiresRestart": true,
            "description": "Baudrate for serial port, default: 115200 for Z-Stack, 38400 for Deconz",
            "examples": [38400, 115200]
          },
          "rtscts": {
            "type": "boolean",
            "title": "RTS / CTS",
            "requiresRestart": true,
            "description": "RTS / CTS Hardware Flow Control for serial port"
          },
          "soft_reset_timeout": {
            "type": "number",
            "minimum": 0,
            "requiresRestart": true,
            "title": "Soft reset timeout (deprecated)",
            "description": "Soft reset ZNP after timeout",
            "readOnly": true
          },
          "last_seen": {
            "type": "string",
            "enum": ["disable", "ISO_8601", "ISO_8601_local", "epoch"],
            "title": "Last seen",
            "description": "Add a last_seen attribute to MQTT messages, contains date/time of last Zigbee message"
          },
          "elapsed": {
            "type": "boolean",
            "title": "Elapsed",
            "description": "Add an elapsed attribute to MQTT messages, contains milliseconds since the previous msg"
          },
          "availability_timeout": {
            "type": "number",
            "minimum": 0,
            "requiresRestart": true,
            "title": "Availability Timeout",
            "description": "Availability timeout in seconds when enabled, devices will be checked if they are still online. Only AC powered routers are checked for availability"
          },
          "availability_blocklist": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "requiresRestart": true,
            "title": "Availability Blocklist",
            "description": "Prevent devices from being checked for availability"
          },
          "availability_passlist": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "requiresRestart": true,
            "title": "Availability passlist",
            "description": "Only enable availability check for certain devices"
          },
          "report": {
            "type": "boolean",
            "title": "Reporting",
            "requiresRestart": true,
            "readOnly": true,
            "description": "Enables report feature (deprecated)"
          },
          "timestamp_format": {
            "type": "string",
            "title": "Timestamp format",
            "requiresRestart": true,
            "description": "Log timestamp format",
            "examples": ["YYYY-MM-DD HH:mm:ss"]
          },
          "adapter_concurrent": {
            "title": "Adapter concurrency",
            "requiresRestart": true,
            "type": ["number", "null"],
            "description": "Adapter concurrency (e.g. 2 for CC2531 or 16 for CC26X2R1) (default: null, uses recommended value)"
          },
          "adapter_delay": {
            "type": ["number", "null"],
            "requiresRestart": true,
            "title": "Adapter delay",
            "description": "Adapter delay"
          }
        }
      },
      "ota": {
        "type": "object",
        "title": "OTA updates",
        "properties": {
          "update_check_interval": {
            "type": "number",
            "title": "Update check interval",
            "description": "Your device may request a check for a new firmware update. This value determines how frequently third party servers may actually be contacted to look for firmware updates. The value is set in minutes, and the default is 10."
          },
          "disable_automatic_update_check": {
            "type": "boolean",
            "title": "Disable automatic update check",
            "description": "Zigbee devices may request a firmware update, and do so frequently, causing Zigbee2MQTT to reach out to third party servers. If you disable these device initiated checks, you can still initiate a firmware update check manually."
          }
        }
      },
      "frontend": {
        "type": "object",
        "title": "Frontend",
        "properties": {
          "port": {
            "type": "number",
            "title": "Port",
            "description": "Frontend binding port",
            "default": 8080,
            "requiresRestart": true
          },
          "host": {
            "type": "string",
            "title": "Bind host",
            "description": "Frontend binding host",
            "default": "0.0.0.0",
            "requiresRestart": true
          },
          "auth_token": {
            "type": ["string", "null"],
            "title": "Auth token",
            "description": "Enables authentication, disabled by default",
            "requiresRestart": true
          }
        }
      }
    },
    "required": ["mqtt"],
    "definitions": {
      "device": {
        "type": "object",
        "properties": {
          "friendly_name": {
            "type": "string",
            "title": "Friendly name",
            "description": "Used in the MQTT topic of a device. By default this is the device ID",
            "readOnly": true
          },
          "retain": {
            "type": "boolean",
            "title": "Retain",
            "description": "Retain MQTT messages of this device"
          },
          "retention": {
            "type": "number",
            "title": "Retention",
            "description": "Sets the MQTT Message Expiry in seconds, Make sure to set mqtt.version to 5"
          },
          "qos": {
            "type": "number",
            "title": "QoS",
            "descritption": "QoS level for MQTT messages of this device"
          },
          "debounce": {
            "type": "number",
            "title": "Debounce",
            "description": "Debounces messages of this device"
          },
          "debounce_ignore": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "examples": ["action"],
            "title": "Ignore debounce",
            "description": "Protects unique payload values of specified payload properties from overriding within debounce time"
          },
          "optimistic": {
            "type": "boolean",
            "title": "Optimistic",
            "description": "Publish optimistic state after set (default true)"
          },
          "filtered_attributes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "examples": ["temperature", "battery", "action"],
            "title": "Filtered attributes",
            "description": "Allows to prevent certain attributes from being published"
          }
        },
        "required": ["friendly_name"]
      },
      "group": {
        "type": "object",
        "properties": {
          "friendly_name": {
            "type": "string"
          },
          "retain": {
            "type": "boolean"
          },
          "devices": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "optimistic": {
            "type": "boolean"
          },
          "qos": {
            "type": "number"
          },
          "filtered_attributes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["friendly_name"]
      }
    }
  }
}